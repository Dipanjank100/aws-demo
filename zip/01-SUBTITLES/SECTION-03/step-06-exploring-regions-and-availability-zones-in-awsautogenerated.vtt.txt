WEBVTT

00:00.890 --> 00:01.450
In this step,

00:01.460 --> 00:05.210
Let's talk about regions and zones in AWS.

00:05.630 --> 00:10.820
In the last step, we talked about the advantages of having multiple regions and multiple data centers.

00:11.300 --> 00:16.340
Now, imagine setting up data centers in different regions around the world.

00:16.550 --> 00:17.960
Would it be easy?

00:17.990 --> 00:19.790
The answer is no.

00:20.300 --> 00:25.790
If you want to set up infrastructure all around the world, you would need a large team.

00:26.530 --> 00:27.910
Think about a startup.

00:27.940 --> 00:33.340
Can a startup deploy infrastructure on its own to different parts of the world?

00:33.940 --> 00:41.110
That would be very difficult for a startup, and that's where all cloud providers, including AWS, provide us with regions all around the world.

00:43.900 --> 00:47.320
It provides 25 plus regions around the world, and this is an ever-expanding list.

00:49.570 --> 00:52.570
New regions are added every year.

00:53.050 --> 00:54.340
Now, what is a region?

00:54.730 --> 01:00.310
A region is a specific geographic location where we can host our resources.

01:00.850 --> 01:06.790
You can choose to host your application in Mumbai region or London region.

01:09.910 --> 01:12.070
By having multiple regions around the world, it makes it very easy for us to deploy applications to different parts of the world.

01:18.940 --> 01:19.180
Now, what are the advantages of having multiple regions?

01:22.130 --> 01:24.710
The number one advantage is high availability.

01:25.160 --> 01:29.870
If you deploy your application to multiple regions around the world, even if one of these regions goes down, you can still serve your users from the other regions.

01:34.190 --> 01:36.230
Number two is low latency.

01:36.680 --> 01:42.680
You can serve your users from the nearest region to them and therefore they get low latency.

01:43.190 --> 01:46.160
If there's a request coming in from India, you can serve it from Mumbai.

01:46.610 --> 01:50.840
If there's a request coming in from somewhere in Europe, you can serve it from the London region.

01:50.840 --> 01:55.700
And if a request is coming in from the United States, you can serve it from one of the regions in the United States.

01:58.180 --> 02:01.300
The third advantage is a global footprint.

02:01.930 --> 02:06.910
A startup in India can easily deploy applications to multiple parts of the world.

02:07.590 --> 02:11.490
The last advantage is adherence to global regulations.

00:43.900 --> 00:47.320
It provides 25 plus regions around the world.

00:47.320 --> 00:49.540
And this is an ever-expanding list.

00:49.570 --> 00:52.570
There are new regions added every year.

00:53.050 --> 00:54.340
Now, what is a region?

00:54.730 --> 01:00.310
A region is nothing but a specific geographic location where we can host our resources.

01:00.850 --> 01:06.790
You can decide, "I would want to host my application in Mumbai region," or "I can say I would want to host my application in London region."

01:09.910 --> 01:12.070
By having multiple regions around the world,

01:12.130 --> 01:17.800
it makes it very, very easy for us to deploy applications to different parts of the world.

01:18.940 --> 01:19.180
Now,

01:19.180 --> 01:21.310
what are the advantages of having multiple regions?

01:22.130 --> 01:24.710
Number one is high availability.

01:25.160 --> 01:29.870
If you deploy your application to multiple regions around the world, even if one of these regions goes down, you can serve your users from the other regions.

01:34.190 --> 01:36.230
Number two is low latency.

01:36.680 --> 01:42.680
You can serve your users from the nearest region to them and therefore they get low latency.

01:43.190 --> 01:46.160
If there's a request coming in from India, you can serve from Mumbai.

01:46.610 --> 01:50.840
If there's a request coming in from somewhere in Europe, you can serve from the London region.

01:50.840 --> 01:55.700
And if a request is coming in from the United States, you can probably serve it from one of the regions in the United States.

01:58.180 --> 02:01.300
The third advantage is global footprint.

02:01.930 --> 02:06.910
A startup in India can easily deploy applications to multiple parts of the world.

02:07.590 --> 02:11.490
The last advantage is adherence to global regulations.

02:15.000 --> 02:21.000
Let's say the United States of America wants all the data related to its citizens to reside only within their country.

02:21.000 --> 02:21.930
In those kinds of situations, you can create a region in the United States and store all data to US customers only in that specific region.

02:31.170 --> 02:37.710
So regions help us achieve high availability, low latency, global footprint, and help us to adhere to government regulations.

02:40.200 --> 02:43.560
Now the question is, what is the need for availability zones?

02:44.490 --> 02:48.930
How do you achieve high availability in this same region?

02:49.020 --> 02:52.560
That's where availability zones are really, really useful.

02:52.780 --> 02:57.780
ADA provides multiple availability zones in each of the regions.

02:58.140 --> 03:05.490
Each availability zone is nothing but a set of one or more discrete data centers.

03:05.910 --> 03:12.990
Each of the availability zones has independent and redundant power, networking and connectivity.

03:13.650 --> 03:18.090
The chance that two availability zones simultaneously fail is very, very rare.

03:19.440 --> 03:27.060
In addition, all the availability zones in a region are connected through low latency links, so there

03:27.060 --> 03:31.920
can be very fast communication between applications deployed in the same availability zone.

03:32.430 --> 03:36.480
The biggest advantage of going for availability zones is increased availability and fault tolerance

03:36.480 --> 03:39.630
while deploying the application in this same region.

03:40.050 --> 03:44.610
So if I'm deploying my application to multiple availability zones in the same region, even if one of

03:44.610 --> 03:49.710
the availability zones goes down, you can serve the application from the other availability zone.

03:50.310 --> 03:51.940
Let's look at a few examples.

03:51.960 --> 03:54.650
Regions and availability zones in us.

03:55.320 --> 03:56.580
US has two regions.

03:56.610 --> 04:01.140
This region is called US North Virginia and there are six availability zones.

04:01.530 --> 04:07.770
You can see that the name of the region is US East one and the name of the availability zone is the name

04:07.770 --> 04:10.650
of the region followed by an alphabet.

04:10.680 --> 04:17.310
For example, there are six availability zones running from A to F, so you have US East 1A, 1B,

04:17.310 --> 04:19.450
1C, 1D, 1E and 1F.

04:19.470 --> 04:22.520
These are the six availability zones in the US East one region.

04:22.530 --> 04:23.970
US East one.

04:24.150 --> 04:30.690
Similarly, there are regions around the world, such as US West 2, which is the Europe London region

04:30.690 --> 04:34.350
and has three availability zones - A, B, and C.

04:35.360 --> 04:37.530
There is also a region in India.

04:37.550 --> 04:42.320
AP South one is in the Asia-Pacific region, specifically Mumbai, and it has three availability zones.

04:42.430 --> 04:45.530
They are named one A, one B, and one C.

04:46.130 --> 04:49.360
In this step, we looked at regions and availability zones in AWS.

04:50.330 --> 04:53.300
I hope you're having a wonderful time and I'll see you in the next step.